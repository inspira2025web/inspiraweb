<?php
$host = "localhost";
$db   = "cbeydepb_lamp";
$user = "cbeydepb_lamp";
$pass = "37zS6HGVejxwJ3JMLwjn";
$message = "";

try {
    $pdo = new PDO("mysql:host=$host;charset=utf8", $user, $pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Check if the database exists
    $stmt = $pdo->query("SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '$db'");
    if ($stmt->rowCount() == 0) {
        // Database does not exist, create it
        $pdo->exec("CREATE DATABASE `$db`");
        $message .= "Database '$db' created successfully.<br>";
    }

    // Connect to the new database
    $pdo->exec("USE `$db`");

    // Check if the lamps table exists
    $stmt = $pdo->query("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$db' AND TABLE_NAME = 'lamps'");
    if ($stmt->rowCount() == 0) {
        // Table does not exist, create and populate it
        $sql = file_get_contents('lamp.sql');
        $pdo->exec($sql);
        $message .= "Database tables created and populated successfully!";
    }

} catch (PDOException $e) {
    die("DB setup failed: " . $e->getMessage());
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>INSPIRA 2025 Oil Lamps Collection</title>
    <link rel="stylesheet" href="assets/css/lamp.css">
    
   <style>
        .site-footer {
            background: #0f172a;
            color: #f8fafc;
            text-align: center;
            padding: 20px 10px;
            margin-top: auto;
            font-size: 15px;
            line-height: 1.6;
        }
        .site-footer .footer-links a {
            color: #38bdf8;
            text-decoration: none;
            margin: 0 5px;
            transition: color 0.3s;
        }
        .site-footer .footer-links a:hover {
            color: #f8fafc;
        }
        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }
        .container {
            flex: 1; /* pushes footer down if content is short */
        }
    </style>

    
</head>
<body class="animated-gradient">
  
    <div class="center-message">
        ✨ WELCOME TO INSPIRA 2025 ✨
    </div>
    <div class="container">
        <div class="lamps-ring" id="lampsRing">
            <!-- Outer ring lamps will be generated by JavaScript -->
            <div class="inner-lamps-ring" id="innerLampsRing">
                <!-- Inner ring lamps will be generated by JavaScript -->
            </div>
        </div>
    </div>

    <script>
        // Function to create a single lamp
        function createLamp(lamp, isInner = false) {
            const lampCard = document.createElement('div');
            const lampNumber = lamp.lamp_number;
            const className = isInner
                ? `lamp-card inner-lamp-${lampNumber - 20}`
                : `lamp-card lamp-${lampNumber}`;

            lampCard.className = className;
            lampCard.dataset.lampId = lampNumber; // Store lamp number in a data attribute

            if (parseInt(lamp.is_lit)) {
                lampCard.classList.add('lit');
            }

            lampCard.onclick = () => toggleLamp(lampCard);
            
            lampCard.innerHTML = `
                <div class="lotus-lamp">
                    <div class="lotus-center"></div>
                    <div class="lotus-petals">
                        ${Array.from({length: 16}, (_, i) => {
                            const angle = (i * 22.5); // 360/16 = 22.5 degrees
                            return `<div class="petal" style="transform: rotate(${angle}deg);"></div>`;
                        }).join('')}
                    </div>
                    <div class="flame-container">
                        <div class="flame"></div>
                    </div>
                </div>
            `;
            
            return lampCard;
        }

        // Function to toggle lamp state
        async function toggleLamp(lampElement) {
            const lampId = lampElement.dataset.lampId;
            if (!lampId) return;

            try {
                const response = await fetch(`lampupdate.php?id=${lampId}`);
                const result = await response.json();

                if (result.status === 'ok') {
                    // Toggle visual state only after successful update
                    lampElement.classList.toggle('lit');

                    // Add a subtle click animation
                    lampElement.style.transform = lampElement.style.transform.includes('scale')
                        ? lampElement.style.transform.replace(/scale\([^)]*\)/, 'scale(0.95)')
                        : lampElement.style.transform + ' scale(0.95)';

                    setTimeout(() => {
                        lampElement.style.transform = lampElement.style.transform.replace(/\s*scale\([^)]*\)/, '');
                    }, 150);
                } else {
                    console.error('Failed to update lamp state:', result.message);
                }
            } catch (error) {
                console.error('Error updating lamp state:', error);
            }
        }

        // Function to position lamps in a circle with gaps
        function positionLampInCircle(lamp, index, total, radius) {
            const angle = (index / total) * 2 * Math.PI - Math.PI / 2; // Start from top
            const x = Math.cos(angle) * radius;
            const y = Math.sin(angle) * radius;
            
            lamp.style.left = `calc(50% + ${x}px - 40px)`; // 40px = half of lamp width
            lamp.style.top = `calc(50% + ${y}px - 40px)`; // 40px = half of lamp height
        }

        // Generate outer ring (20 lamps)
        function generateOuterLamps(lamps) {
            const lampsRing = document.getElementById('lampsRing');
            const radius = window.innerWidth <= 480 ? 140 : window.innerWidth <= 768 ? 180 : 280;
            
            lamps.forEach((lampData, index) => {
                const lamp = createLamp(lampData, false);
                lampsRing.appendChild(lamp);
                positionLampInCircle(lamp, index, 20, radius);
            });
        }

        // Generate inner ring (5 lamps)
        function generateInnerLamps(lamps) {
            const innerLampsRing = document.getElementById('innerLampsRing');
            const radius = window.innerWidth <= 480 ? 50 : window.innerWidth <= 768 ? 65 : 85;
            
            lamps.forEach((lampData, index) => {
                const lamp = createLamp(lampData, true);
                innerLampsRing.appendChild(lamp);
                positionLampInCircle(lamp, index, 5, radius);
            });
        }

        // Reposition lamps on window resize
        function repositionLamps() {
            // Reposition outer ring lamps
            const outerLamps = document.querySelectorAll('#lampsRing > .lamp-card:not(.inner-lamps-ring .lamp-card)');
            const outerRadius = window.innerWidth <= 480 ? 140 : window.innerWidth <= 768 ? 180 : 280;
            
            outerLamps.forEach((lamp, index) => {
                positionLampInCircle(lamp, index, 20, outerRadius);
            });

            // Reposition inner ring lamps
            const innerLamps = document.querySelectorAll('#innerLampsRing .lamp-card');
            const innerRadius = window.innerWidth <= 480 ? 55 : window.innerWidth <= 768 ? 70 : 90;
            
            innerLamps.forEach((lamp, index) => {
                positionLampInCircle(lamp, index, 5, innerRadius);
            });
        }

        // Update lamp states based on server data
        function updateLampStates(lamps) {
            lamps.forEach(lampData => {
                const lampElement = document.querySelector(`[data-lamp-id="${lampData.lamp_number}"]`);
                if (lampElement) {
                    const isLit = parseInt(lampData.is_lit) === 1;
                    if (isLit && !lampElement.classList.contains('lit')) {
                        lampElement.classList.add('lit');
                    } else if (!isLit && lampElement.classList.contains('lit')) {
                        lampElement.classList.remove('lit');
                    }
                }
            });
        }

        // Fetch lamp states from the server
        async function initializeLamps() {
            try {
                const response = await fetch('fetch.php');
                const lamps = await response.json();
                if (lamps.error) {
                    console.error('Error fetching lamp states:', lamps.error);
                    return;
                }
                // Generate the lamps for the first time
                generateOuterLamps(lamps.slice(0, 20));
                generateInnerLamps(lamps.slice(20, 25));
            } catch (error) {
                console.error('Failed to fetch lamp states:', error);
            }
        }

        // Initialize the lamps when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            initializeLamps();
            // Start polling for updates
            setInterval(async () => {
                try {
                    const response = await fetch('fetch.php');
                    const lamps = await response.json();
                    if (!lamps.error) {
                        updateLampStates(lamps);
                    }
                } catch (error) {
                    console.error('Polling error:', error);
                }
            }, 2000); // Poll every 2 seconds
        });

        // Reposition on window resize
        window.addEventListener('resize', repositionLamps);

        // Add touch support for mobile devices
        document.addEventListener('touchstart', function(e) {
            const lampCard = e.target.closest('.lamp-card');
            if (lampCard) {
                e.preventDefault(); // Prevent default touch behavior
                toggleLamp(lampCard);
            }
        });
    </script>
    
</body>
</html>
